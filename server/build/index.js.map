{
  "version": 3,
  "sources": ["<stdin>", "../../node_modules/.pnpm/@remix-run+dev@1.0.6/node_modules/@remix-run/dev/compiler/shims/react.ts", "../../app/entry.server.tsx", "route-module:E:\\1371164370\\git\\my_remix_app\\app\\root.tsx", "route-module:E:\\1371164370\\git\\my_remix_app\\app\\routes\\chatting-room.tsx", "../../app/hooks/useHydrated.ts", "../../app/components/ClientOnly.tsx", "../../app/components/UserList.tsx", "../../app/utils/session.server.ts", "../../app/utils/db.server.ts", "route-module:E:\\1371164370\\git\\my_remix_app\\app\\routes\\game-room.tsx", "route-module:E:\\1371164370\\git\\my_remix_app\\app\\routes\\index.tsx", "route-module:E:\\1371164370\\git\\my_remix_app\\app\\routes\\login.tsx"],
  "sourcesContent": ["\nimport * as entryServer from \"E:\\\\1371164370\\\\git\\\\my_remix_app\\\\app\\\\entry.server.tsx\";\nimport * as route0 from \"E:\\\\1371164370\\\\git\\\\my_remix_app\\\\app\\\\root.tsx\";\nimport * as route1 from \"E:\\\\1371164370\\\\git\\\\my_remix_app\\\\app\\\\routes\\\\chatting-room.tsx\";\nimport * as route2 from \"E:\\\\1371164370\\\\git\\\\my_remix_app\\\\app\\\\routes\\\\game-room.tsx\";\nimport * as route3 from \"E:\\\\1371164370\\\\git\\\\my_remix_app\\\\app\\\\routes\\\\index.tsx\";\nimport * as route4 from \"E:\\\\1371164370\\\\git\\\\my_remix_app\\\\app\\\\routes\\\\login.tsx\";\nexport { default as assets } from \"./assets.json\";\nexport const entry = { module: entryServer };\nexport const routes = {\n  \"root\": {\n    id: \"root\",\n    parentId: undefined,\n    path: \"\",\n    index: undefined,\n    caseSensitive: undefined,\n    module: route0\n  },\n  \"routes/chatting-room\": {\n    id: \"routes/chatting-room\",\n    parentId: \"root\",\n    path: \"chatting-room\",\n    index: undefined,\n    caseSensitive: undefined,\n    module: route1\n  },\n  \"routes/game-room\": {\n    id: \"routes/game-room\",\n    parentId: \"root\",\n    path: \"game-room\",\n    index: undefined,\n    caseSensitive: undefined,\n    module: route2\n  },\n  \"routes/index\": {\n    id: \"routes/index\",\n    parentId: \"root\",\n    path: undefined,\n    index: true,\n    caseSensitive: undefined,\n    module: route3\n  },\n  \"routes/login\": {\n    id: \"routes/login\",\n    parentId: \"root\",\n    path: \"login\",\n    index: undefined,\n    caseSensitive: undefined,\n    module: route4\n  }\n};", "import * as React from \"react\";\nexport { React };\n", "import { renderToString } from \"react-dom/server\";\r\nimport { RemixServer } from \"remix\";\r\nimport type { EntryContext } from \"remix\";\r\n\r\nexport default function handleRequest(\r\n  request: Request,\r\n  responseStatusCode: number,\r\n  responseHeaders: Headers,\r\n  remixContext: EntryContext\r\n) {\r\n  let markup = renderToString(\r\n    <RemixServer context={remixContext} url={request.url} />\r\n  );\r\n\r\n  responseHeaders.set(\"Content-Type\", \"text/html\");\r\n\r\n  return new Response(\"<!DOCTYPE html>\" + markup, {\r\n    status: responseStatusCode,\r\n    headers: responseHeaders\r\n  });\r\n}\r\n", "import {\r\n  Links,\r\n  LiveReload,\r\n  Outlet,\r\n\r\n} from \"remix\";\r\nimport type { LinksFunction } from \"remix\";\r\n\r\nimport globalStylesUrl from \"~/styles/global.css\";\r\nimport darkStylesUrl from \"~/styles/dark.css\";\r\n\r\n// https://remix.run/api/app#links\r\nexport let links: LinksFunction = () => {\r\n  return [\r\n    { rel: \"stylesheet\", href: globalStylesUrl },\r\n    {\r\n      rel: \"stylesheet\",\r\n      href: darkStylesUrl,\r\n      media: \"(prefers-color-scheme: dark)\",\r\n    },\r\n  ];\r\n};\r\n\r\n// https://remix.run/api/conventions#default-export\r\n// https://remix.run/api/conventions#route-filenames\r\nexport default function App() {\r\n  return (\r\n    <html lang=\"en\">\r\n      <head>\r\n        <meta charSet=\"utf-8\" />\r\n        <title>Remix: So great, it's funny!</title>\r\n        <Links />\r\n      </head>\r\n      <body>\r\n        <Outlet />\r\n        {process.env.NODE_ENV === \"development\" ? (\r\n          <LiveReload />\r\n        ) : null}\r\n      </body>\r\n    </html>\r\n  );\r\n}", "import type {User } from \"@prisma/client\";\r\nimport {\r\n  Link,\r\n  LinksFunction,\r\n  LoaderFunction,\r\n  Outlet,\r\n  useLoaderData,\r\n} from \"remix\";\r\nimport { UserList } from \"~/components/UserList\";\r\nimport { getUser, requireJWT } from \"~/utils/session.server\";\r\nimport stylesUrl from \"../styles/chatting-room.css\";\r\n\r\ntype ChattingRoomData = {\r\n  userList: User[];\r\n  curUser: User;\r\n  token:string\r\n};\r\n\r\nexport const links: LinksFunction = () => {\r\n  return [\r\n    {\r\n      rel: \"stylesheet\",\r\n      href: stylesUrl,\r\n    },\r\n  ];\r\n};\r\n\r\nexport const loader: LoaderFunction = async ({ request }) => {\r\n  const curUser = await getUser(request);\r\n  const token = await requireJWT(request)\r\n  const userList:User[] = [];\r\n  return {\r\n    userList,\r\n    curUser,\r\n    token\r\n  };\r\n};\r\n\r\nexport default function ChattingRoom() {\r\n  const data = useLoaderData<ChattingRoomData>();\r\n  return (\r\n    <div className=\"jokes-layout\">\r\n      <header className=\"jokes-header\">\r\n        <div className=\"container\">\r\n          <h1 className=\"home-link\">\r\n            <Link to=\"/\" title=\"Remix Jokes\" aria-label=\"Remix Jokes\">\r\n              <span className=\"logo\">\uD83E\uDD2A</span>\r\n              <span className=\"logo-medium\">J\uD83E\uDD2AKES</span>\r\n            </Link>\r\n          </h1>\r\n          {data.curUser ? (\r\n            <div className=\"user-info\">\r\n              <span>{`Hi ${data.curUser.username}`}</span>\r\n              <form action=\"/logout\" method=\"post\">\r\n                <button type=\"submit\" className=\"button\">\r\n                  Logout\r\n                </button>\r\n              </form>\r\n            </div>\r\n          ) : (\r\n            <Link to=\"/login\">Login</Link>\r\n          )}\r\n        </div>\r\n      </header>\r\n      <main className=\"jokes-main\">\r\n        <div className=\"container\">\r\n          <div className=\"jokes-list\">\r\n            <Link to=\".\">Get a random joke</Link>\r\n            <p>Here are a few more jokes to check out:</p>\r\n            <UserList jwt={data.token}/>\r\n            <Link to=\"new\" className=\"button\">\r\n              Add your own\r\n            </Link>\r\n          </div>\r\n          <div className=\"jokes-outlet\">\r\n            <Outlet />\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n", "import { useEffect, useState } from \"react\"\r\n\r\nlet hydrating = true;\r\nexport const useHydrated = () => {\r\n    const [isHydrated, setIsHydrated] = useState(() => !hydrating)\r\n    useEffect(() => {\r\n        hydrating = false;\r\n        setIsHydrated(true);\r\n    }, [])\r\n\r\n    return isHydrated\r\n}", "import { ReactNode } from \"react\";\r\nimport { useHydrated } from \"~/hooks/useHydrated\";\r\n\r\ntype Props = {\r\n    children: ReactNode;\r\n    fallback?: ReactNode;\r\n  };\r\n  \r\n  /**\r\n   * Render the children only after the JS has loaded client-side. Use an optional\r\n   * fallback component if the JS is not yet loaded.\r\n   *\r\n   * Example: Render a Chart component if JS loads, renders a simple FakeChart\r\n   * component server-side or if there is no JS. The FakeChart can have only the\r\n   * UI without the behavior or be a loading spinner or skeleton.\r\n   * ```tsx\r\n   * return (\r\n   *   <ClientOnly fallback={<FakeChart />}>\r\n   *     <Chart />\r\n   *   </ClientOnly>\r\n   * );\r\n   * ```\r\n   */\r\n  export const  ClientOnly = ({ children, fallback = null }: Props) =>{\r\n    return useHydrated() ? <>{children}</> : <>{fallback}</>;\r\n  }", "import { useUserList } from \"~/hooks/useUserList\";\r\nimport { ClientOnly } from \"./ClientOnly\";\r\ninterface Props{\r\n  jwt:string\r\n}\r\n\r\nexport const UserList = ({jwt}:Props) => {\r\n  // const [userList, setUserList] = useUserList(jwt);\r\n\r\n  return (\r\n    <ClientOnly fallback={'loading'}>\r\n     UserList\r\n      {/* {userList.map((user) => (\r\n        <>{JSON.stringify(user)}</>\r\n      ))} */}\r\n    </ClientOnly>\r\n  );\r\n};\r\n", "import bcrypt from \"bcrypt\";\r\nimport { createCookieSessionStorage, redirect } from \"remix\";\r\nimport { db } from \"./db.server\";\r\nimport jwt from 'jsonwebtoken'\r\n\r\ntype LoginForm = {\r\n  username: string;\r\n  password: string;\r\n};\r\n\r\nexport async function login({\r\n  username,\r\n  password\r\n}: LoginForm) {\r\n  const user = await db.user.findUnique({\r\n    where: { username }\r\n  });\r\n  if (!user) return null;\r\n\r\n  const isCorrectPassword = await bcrypt.compare(\r\n    password,\r\n    user.passwordHash\r\n  );\r\n  if (!isCorrectPassword) return null;\r\n  return user;\r\n}\r\n\r\nconst sessionSecret = process.env.SESSION_SECRET;\r\nif (!sessionSecret) {\r\n  throw new Error(\"SESSION_SECRET must be set\");\r\n}\r\n\r\nconst storage = createCookieSessionStorage({\r\n  cookie: {\r\n    name: \"RJ_session\",\r\n    // normally you want this to be `secure: true`\r\n    // but that doesn't work on localhost for Safari\r\n    // https://web.dev/when-to-use-local-https/\r\n    secure: process.env.NODE_ENV === \"production\",\r\n    secrets: [sessionSecret],\r\n    sameSite: \"lax\",\r\n    path: \"/\",\r\n    maxAge: 60 * 60 * 24 * 30,\r\n    httpOnly: true\r\n  }\r\n});\r\n\r\nexport async function getUser(request: Request) {\r\n  const userId = await getUserId(request);\r\n  if (typeof userId !== \"string\") {\r\n    return null;\r\n  }\r\n\r\n  try {\r\n    const user = await db.user.findUnique({\r\n      where: { id: userId }\r\n    });\r\n    return user;\r\n  } catch {\r\n    throw logout(request);\r\n  }\r\n}\r\n\r\nexport async function logout(request: Request) {\r\n  const session = await storage.getSession(\r\n    request.headers.get(\"Cookie\")\r\n  );\r\n  return redirect(\"/login\", {\r\n    headers: {\r\n      \"Set-Cookie\": await storage.destroySession(session)\r\n    }\r\n  });\r\n}\r\n\r\nexport async function register({\r\n  username,\r\n  password\r\n}: LoginForm) {\r\n  const passwordHash = await bcrypt.hash(password, 10);\r\n  return db.user.create({\r\n    data: { username, passwordHash }\r\n  });\r\n}\r\n\r\nexport function getUserSession(request: Request) {\r\n  return storage.getSession(request.headers.get(\"Cookie\"));\r\n}\r\n\r\nexport async function requireJWT(request: Request) {\r\n  const userId = await requireUserId(request)\r\n  try {\r\n    const user = await db.user.findUnique({\r\n      where: { id: userId }\r\n    });\r\n    if (!user) throw logout(request)\r\n    const { username, passwordHash } = user\r\n    const token = jwt.sign({ username, passwordHash: passwordHash }, process.env.SESSION_SECRET as string, { expiresIn: \"7d\" })\r\n\r\n    return token\r\n  } catch {\r\n    throw logout(request);\r\n  }\r\n}\r\n\r\nexport async function getUserId(request: Request) {\r\n  const session = await getUserSession(request);\r\n  const userId = session.get(\"userId\");\r\n  if (!userId || typeof userId !== \"string\") return null;\r\n  return userId;\r\n}\r\n\r\nexport async function requireUserId(\r\n  request: Request,\r\n  redirectTo: string = new URL(request.url).pathname\r\n) {\r\n  const session = await getUserSession(request);\r\n  const userId = session.get(\"userId\");\r\n  if (!userId || typeof userId !== \"string\") {\r\n    const searchParams = new URLSearchParams([\r\n      [\"redirectTo\", redirectTo]\r\n    ]);\r\n    throw redirect(`/login?${searchParams}`);\r\n  }\r\n  return userId;\r\n}\r\n\r\nexport async function createUserSession(\r\n  userId: string,\r\n  redirectTo: string\r\n) {\r\n  const session = await storage.getSession();\r\n  session.set(\"userId\", userId);\r\n  return redirect(redirectTo, {\r\n    headers: {\r\n      \"Set-Cookie\": await storage.commitSession(session)\r\n    }\r\n  });\r\n}", "import { PrismaClient } from \"@prisma/client\";\r\n\r\nlet db: PrismaClient;\r\n\r\ndeclare global {\r\n  var __db: PrismaClient | undefined;\r\n}\r\n\r\n// this is needed because in development we don't want to restart\r\n// the server with every change, but we want to make sure we don't\r\n// create a new connection to the DB with every change either.\r\nif (process.env.NODE_ENV === \"production\") {\r\n  db = new PrismaClient();\r\n  db.$connect();\r\n} else {\r\n  if (!global.__db) {\r\n    global.__db = new PrismaClient();\r\n    global.__db.$connect();\r\n  }\r\n  db = global.__db;\r\n}\r\n\r\nexport { db };", "export {}", "import type { MetaFunction, LoaderFunction } from \"remix\";\r\nimport { useLoaderData, json, Link } from \"remix\";\r\nimport { UserList } from \"~/components/UserList\";\r\n\r\ntype IndexData = {\r\n  resources: Array<{ name: string; url: string }>;\r\n  demos: Array<{ name: string; to: string }>;\r\n};\r\n\r\n// Loaders provide data to components and are only ever called on the server, so\r\n// you can connect to a database or run any server side code you want right next\r\n// to the component that renders it.\r\n// https://remix.run/api/conventions#loader\r\nexport let loader: LoaderFunction = () => {\r\n  let data: IndexData = {\r\n    resources: [\r\n      {\r\n        name: \"Remix Docs\",\r\n        url: \"https://remix.run/docs\"\r\n      },\r\n      {\r\n        name: \"React Router Docs\",\r\n        url: \"https://reactrouter.com/docs\"\r\n      },\r\n      {\r\n        name: \"Remix Discord\",\r\n        url: \"https://discord.gg/VBePs6d\"\r\n      }\r\n    ],\r\n    demos: [\r\n      {\r\n        to: \"demos/actions\",\r\n        name: \"Actions\"\r\n      },\r\n      {\r\n        to: \"demos/about\",\r\n        name: \"Nested Routes, CSS loading/unloading\"\r\n      },\r\n      {\r\n        to: \"demos/params\",\r\n        name: \"URL Params and Error Boundaries\"\r\n      }\r\n    ]\r\n  };\r\n\r\n  // https://remix.run/api/remix#json\r\n  return json(data);\r\n};\r\n\r\n// https://remix.run/api/conventions#meta\r\nexport let meta: MetaFunction = () => {\r\n  return {\r\n    title: \"Remix Starter\",\r\n    description: \"Welcome to remix!\"\r\n  };\r\n};\r\n\r\n// https://remix.run/guides/routing#index-routes\r\nexport default function Index() {\r\n  let data = useLoaderData<IndexData>();\r\n\r\n  return (\r\n    <div className=\"remix__page\">\r\n      <main>\r\n        <h2>Welcome to Remix!</h2>\r\n        <p>We're stoked that you're here. \uD83E\uDD73</p>\r\n        <p>\r\n          Feel free to take a look around the code to see how Remix does things,\r\n          it might be a bit different than what you\u2019re used to. When you're\r\n          ready to dive deeper, we've got plenty of resources to get you\r\n          up-and-running quickly.\r\n        </p>\r\n        <p>\r\n          Check out all the demos in this starter, and then just delete the{\" \"}\r\n          <code>app/routes/demos</code> and <code>app/styles/demos</code>{\" \"}\r\n          folders when you're ready to turn this into your next project.\r\n        </p>\r\n      </main>\r\n      <aside>\r\n        <h2>Demos In This App</h2>\r\n        <ul>\r\n            <li key={'/chatting-room'} className=\"remix__page__resource\">\r\n              <Link to={'/chatting-room'} prefetch=\"intent\">\r\n                {\"\u804A\u5929\u5BA4\"}\r\n              </Link>\r\n            </li>\r\n        </ul>\r\n        <h2>Resources</h2>\r\n        <ul>\r\n          {data.resources.map(resource => (\r\n            <li key={resource.url} className=\"remix__page__resource\">\r\n              <a href={resource.url}>{resource.name}</a>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </aside>\r\n    </div>\r\n  );\r\n}\r\n", "import type { ActionFunction, LinksFunction } from \"remix\";\r\nimport { useActionData, json, Link, useSearchParams } from \"remix\";\r\nimport { db } from \"~/utils/db.server\";\r\nimport { createUserSession, login, register } from \"~/utils/session.server\";\r\nimport stylesUrl from \"../styles/login.css\";\r\n\r\nexport const links: LinksFunction = () => {\r\n  return [{ rel: \"stylesheet\", href: stylesUrl }];\r\n};\r\n\r\nfunction validateUsername(username: unknown) {\r\n  if (typeof username !== \"string\" || username.length < 3) {\r\n    return `Usernames must be at least 3 characters long`;\r\n  }\r\n}\r\n\r\nfunction validatePassword(password: unknown) {\r\n  if (typeof password !== \"string\" || password.length < 6) {\r\n    return `Passwords must be at least 6 characters long`;\r\n  }\r\n}\r\n\r\ntype ActionData = {\r\n  formError?: string;\r\n  fieldErrors?: {\r\n    username: string | undefined;\r\n    password: string | undefined;\r\n  };\r\n  fields?: {\r\n    loginType: string;\r\n    username: string;\r\n    password: string;\r\n  };\r\n};\r\n\r\nconst badRequest = (data: ActionData) => json(data, { status: 400 });\r\n\r\nexport const action: ActionFunction = async ({ request }) => {\r\n  const form = await request.formData();\r\n  const loginType = form.get(\"loginType\");\r\n  const username = form.get(\"username\");\r\n  const password = form.get(\"password\");\r\n  const redirectTo = form.get(\"redirectTo\") || \"/jokes\";\r\n  if (\r\n    typeof loginType !== \"string\" ||\r\n    typeof username !== \"string\" ||\r\n    typeof password !== \"string\" ||\r\n    typeof redirectTo !== \"string\"\r\n  ) {\r\n    return badRequest({\r\n      formError: `Form not submitted correctly.`,\r\n    });\r\n  }\r\n\r\n  const fields = { loginType, username, password };\r\n  const fieldErrors = {\r\n    username: validateUsername(username),\r\n    password: validatePassword(password),\r\n  };\r\n  if (Object.values(fieldErrors).some(Boolean))\r\n    return badRequest({ fieldErrors, fields });\r\n\r\n  switch (loginType) {\r\n    case \"login\": {\r\n      const user = await login({ username, password });\r\n      if (!user) {\r\n        return {\r\n          fields,\r\n          formError: `Username/Password combination is incorrect`,\r\n        };\r\n      }\r\n      return createUserSession(user.id, redirectTo);\r\n    }\r\n    case \"register\": {\r\n      const userExists = await db.user.findFirst({\r\n        where: { username },\r\n      });\r\n      if (userExists) {\r\n        return badRequest({\r\n          fields,\r\n          formError: `User with username ${username} already exists`,\r\n        });\r\n      }\r\n      const user = await register({ username, password });\r\n      if (!user) {\r\n        return badRequest({\r\n          fields,\r\n          formError: `Something went wrong trying to create a new user.`,\r\n        });\r\n      }\r\n      return createUserSession(user.id, redirectTo);\r\n    }\r\n    default: {\r\n      return badRequest({\r\n        fields,\r\n        formError: `Login type invalid`,\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nexport default function Login() {\r\n  const actionData = useActionData<ActionData>();\r\n  const [searchParams] = useSearchParams();\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"content\" data-light=\"\">\r\n        <h1>Login</h1>\r\n        <form\r\n          method=\"post\"\r\n          aria-describedby={\r\n            actionData?.formError ? \"form-error-message\" : undefined\r\n          }\r\n        >\r\n          <input\r\n            type=\"hidden\"\r\n            name=\"redirectTo\"\r\n            value={searchParams.get(\"redirectTo\") ?? undefined}\r\n          />\r\n          <fieldset>\r\n            <legend className=\"sr-only\">Login or Register?</legend>\r\n            <label>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"loginType\"\r\n                value=\"login\"\r\n                defaultChecked={\r\n                  !actionData?.fields?.loginType ||\r\n                  actionData?.fields?.loginType === \"login\"\r\n                }\r\n              />{\" \"}\r\n              Login\r\n            </label>\r\n            <label>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"loginType\"\r\n                value=\"register\"\r\n                defaultChecked={actionData?.fields?.loginType === \"register\"}\r\n              />{\" \"}\r\n              Register\r\n            </label>\r\n          </fieldset>\r\n          <div>\r\n            <label htmlFor=\"username-input\">Username</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"username-input\"\r\n              name=\"username\"\r\n              defaultValue={actionData?.fields?.username}\r\n              aria-invalid={Boolean(actionData?.fieldErrors?.username)}\r\n              aria-describedby={\r\n                actionData?.fieldErrors?.username ? \"username-error\" : undefined\r\n              }\r\n            />\r\n            {actionData?.fieldErrors?.username ? (\r\n              <p\r\n                className=\"form-validation-error\"\r\n                role=\"alert\"\r\n                id=\"username-error\"\r\n              >\r\n                {actionData?.fieldErrors.username}\r\n              </p>\r\n            ) : null}\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"password-input\">Password</label>\r\n            <input\r\n              id=\"password-input\"\r\n              name=\"password\"\r\n              defaultValue={actionData?.fields?.password}\r\n              type=\"password\"\r\n              aria-invalid={\r\n                Boolean(actionData?.fieldErrors?.password) || undefined\r\n              }\r\n              aria-describedby={\r\n                actionData?.fieldErrors?.password ? \"password-error\" : undefined\r\n              }\r\n            />\r\n            {actionData?.fieldErrors?.password ? (\r\n              <p\r\n                className=\"form-validation-error\"\r\n                role=\"alert\"\r\n                id=\"password-error\"\r\n              >\r\n                {actionData?.fieldErrors.password}\r\n              </p>\r\n            ) : null}\r\n          </div>\r\n          <div id=\"form-error-message\">\r\n            {actionData?.formError ? (\r\n              <p className=\"form-validation-error\" role=\"alert\">\r\n                {actionData?.formError}\r\n              </p>\r\n            ) : null}\r\n          </div>\r\n          <button type=\"submit\" className=\"button\">\r\n            Submit\r\n          </button>\r\n        </form>\r\n      </div>\r\n      <div className=\"links\">\r\n        <ul>\r\n          <li>\r\n            <Link to=\"/\">Home</Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
